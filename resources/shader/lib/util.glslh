
#ifndef UTIL_H
#define UTIL_H

#include "defs.glslh"

const float pi = 3.141592653589793; // as supplied by google

vec2 dir(float a) {
    return vec2(cos(a), sin(a));
}

float angle(vec2 v) {
    return atan(v.y, v.x);
}

vec2 cmul(vec2 c1, vec2 c2) {
    // complex multiplication
    // x = real, y = imaginary
    return vec2(c1.x*c2.x - c1.y*c2.y, c1.x*c2.y + c1.y*c2.x);
}

float lum(vec3 c) {
    return 0.216 * c.r + 0.7152 * c.g + 0.0722 * c.b;
}

float min3(vec3 c) {
    return min(c.x, min(c.y, c.z));
}

float _smoothstep(float x) { // TODO: use glsl builtin function
    return 1.0/(exp(8.*x)+1.0);
}

float _smoothstep(float x, float b) { // TODO: use glsl smoothstep
    x = clamp(x/b - 0.5, 0.0, 1.0);
    return x*x*(3.0 - 2.0*x);
}

vec2 uv_to_region(vec4 region, vec2 uv) {
    return vec2(
        mix(region.x, region.x + region.z, uv.x),
        mix(region.y, region.y + region.w, uv.y)
    );
}

vec4 color_mul_alpha(vec4 c) {
    return vec4(c.rgb * c.a, c.a);
}

mat2 rot(float a) {
    return mat2(cos(a), -sin(a), sin(a), cos(a));
}

float line_segment(vec2 p, vec2 a, vec2 b, float thickness) {
    vec2 pa = p - a;
    vec2 ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return smoothstep(thickness, 0.0, length(pa - ba*h));
}

vec4 alphaCompose(vec4 bg, vec4 fg) {
    return fg + bg * (1.0 - fg.a);
}

// Taken from http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl

vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float flip_topleft_to_native(float x) {
#ifdef NATIVE_ORIGIN_BOTTOMLEFT
    return 1 - x;
#else
    return x;
#endif
}

vec2 flip_topleft_to_native(vec2 v) {
    v.y = flip_topleft_to_native(v.y);
    return v;
}

float flip_bottomleft_to_native(float x) {
#ifdef NATIVE_ORIGIN_TOPLEFT
    return 1 - x;
#else
    return x;
#endif
}

vec2 flip_bottomleft_to_native(vec2 v) {
    v.y = flip_bottomleft_to_native(v.y);
    return v;
}

float flip_native_to_topleft(float x) {
#ifdef NATIVE_ORIGIN_TOPLEFT
    return x;
#else
    return 1 - x;
#endif
}

vec2 flip_native_to_topleft(vec2 v) {
    v.y = flip_native_to_topleft(v.y);
    return v;
}

float flip_native_to_bottomleft(float x) {
#ifdef NATIVE_ORIGIN_BOTTOMLEFT
    return x;
#else
    return 1 - x;
#endif
}

vec2 flip_native_to_bottomleft(vec2 v) {
    v.y = flip_native_to_bottomleft(v.y);
    return v;
}

#endif
